/// Checks whether a point is within a polygon. The point is defined by the parameters longitude (or x) and latitude (or y).
/// The polygon is provided as series of points in a table. The table has columns for the longitude (or x) value and for the latitude (or y) value. The order of the points matter, that is why this table uses an index column.
/// The geometrical background and the DAX code is detailed in the article: https://www.dynAnalytics.com/2024/11/03/Geoanalysis-with-Power-BI.html.
function 'DynAnalytics.PointInPolygon' =
		(
			longitude : double val, latitude : double val, Points_Table : anyref expr, IndexCol : anyref expr, Lon_Col : anyref expr, Lat_Col : anyref expr
		) =>
			VAR MinIdx = MINX(Points_Table,IndexCol)
			VAR MaxIdx = MAXX(Points_Table,IndexCol)
			VAR EdgePoint1 = SELECTCOLUMNS(Points_Table,"Index",IndexCol&"","Long1",Lon_Col,"Lati1",Lat_Col)
			VAR EdgePoint2 = SELECTCOLUMNS(Points_Table,"Index",IF(IndexCol>MinIdx,VAR IDX=IndexCol RETURN MAXX(FILTER(Points_Table,IndexCol<IDX),IndexCol),MaxIdx)&"","Long2",Lon_Col,"Lati2",Lat_Col)
			VAR EdgesTable = NATURALINNERJOIN(EdgePoint1,EdgePoint2)
			VAR EdgesUnique = DISTINCT(SELECTCOLUMNS(EdgesTable,[Long1],[Lati1],[Long2],[Lati2]))
			VAR x = longitude
			VAR y = latitude
			VAR Inside =  
			    ISODD(COUNTROWS(
			        FILTER(EdgesUnique,
			            VAR x0 = [Long1]
			            VAR y0 = [Lati1]
			            VAR x1 = [Long2]
			            VAR y1 = [Lati2]
			            RETURN 
			                ((y1 > y && y >= y0) || (y0 > y && y >= y1))  
			                && 
			                (x < (x0-x1)*(y-y1)/(y0-y1) + x1)
			        )
			    ))
			RETURN Inside

	annotation DAXLIB_PackageId = DynAnalytics.PointInPolygon

	annotation DAXLIB_PackageVersion = 0.1.0